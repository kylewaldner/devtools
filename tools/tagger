#!/usr/bin/env python3
"""
Git Tag Manager Script

This script helps manage git version tags by:
- Automatically determining the next version based on the latest tag
- Prompting for tag name and description
- Showing tag details and git log
- Managing remote push operations
"""

import argparse
import subprocess
import sys
import re
import signal
from typing import Optional, Tuple


def signal_handler(signum, frame):
    """Handle interrupt signals gracefully."""
    print("\n\nOperation cancelled by user.")
    sys.exit(0)


def run_git_command(command: list) -> Tuple[bool, str]:
    """Run a git command and return success status and output."""
    try:
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            check=True
        )
        return True, result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return False, e.stderr.strip()


def get_latest_tag() -> Optional[str]:
    """Get the latest git tag."""
    success, output = run_git_command(['git', 'describe', '--tags', '--abbrev=0'])
    if success and output:
        return output
    return None


def parse_version(tag: str) -> Tuple[int, int, int]:
    """Parse version string like 'v1.2.3' into tuple (1, 2, 3)."""
    # Remove 'v' prefix if present
    version_str = tag.lstrip('v')
    try:
        parts = version_str.split('.')
        if len(parts) != 3:
            raise ValueError("Version must have 3 parts (major.minor.patch)")
        return tuple(int(part) for part in parts)
    except ValueError as e:
        raise ValueError(f"Invalid version format '{tag}': {e}")


def increment_version(version_tuple: Tuple[int, int, int], increment_type: str = 'patch') -> Tuple[int, int, int]:
    """Increment version based on type (patch, minor, major)."""
    major, minor, patch = version_tuple

    if increment_type == 'major':
        return (major + 1, 0, 0)
    elif increment_type == 'minor':
        return (major, minor + 1, 0)
    else:  # patch
        return (major, minor, patch + 1)


def format_version(version_tuple: Tuple[int, int, int]) -> str:
    """Format version tuple back to string with 'v' prefix."""
    return f"v{version_tuple[0]}.{version_tuple[1]}.{version_tuple[2]}"


def get_next_version(current_tag: Optional[str]) -> str:
    """Determine the next version based on current tag."""
    if not current_tag:
        return "v0.0.1"

    try:
        current_version = parse_version(current_tag)
        next_version = increment_version(current_version)
        return format_version(next_version)
    except ValueError:
        print(f"Warning: Could not parse current tag '{current_tag}', defaulting to v0.0.1")
        return "v0.0.1"


def create_tag(tag_name: str, description: str) -> bool:
    """Create an annotated git tag."""
    success, output = run_git_command(['git', 'tag', '-a', tag_name, '-m', description])
    if not success:
        print(f"Error creating tag: {output}")
        return False
    return True


def show_tag_info(tag_name: str) -> None:
    """Show detailed information about the tag."""
    print(f"\n{'='*50}")
    print(f"TAG DETAILS: {tag_name}")
    print(f"{'='*50}")

    # Show tag information
    success, tag_info = run_git_command(['git', 'show', tag_name, '--no-patch'])
    if success:
        print(tag_info)

    print(f"\n{'='*50}")
    print("RECENT COMMITS:")
    print(f"{'='*50}")

    # Show recent commits
    success, log_info = run_git_command([
        'git', 'log', '--oneline', '--decorate', '-10'
    ])
    if success:
        print(log_info)


def delete_tag(tag_name: str) -> bool:
    """Delete a local git tag."""
    success, output = run_git_command(['git', 'tag', '-d', tag_name])
    if not success:
        print(f"Error deleting tag: {output}")
        return False
    print(f"Tag '{tag_name}' deleted locally.")
    return True


def push_tags() -> bool:
    """Push tags to remote origin."""
    success, output = run_git_command(['git', 'push', 'origin', '--tags'])
    if not success:
        print(f"Error pushing tags: {output}")
        return False
    print("Tags pushed to remote successfully!")
    return True


def get_user_input(prompt: str, default: str = None) -> str:
    """Get user input with optional default value."""
    try:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            return user_input if user_input else default
        else:
            return input(f"{prompt}: ").strip()
    except KeyboardInterrupt:
        print("\n\nOperation cancelled by user.")
        sys.exit(0)


def get_yes_no(prompt: str) -> bool:
    """Get yes/no input from user."""
    try:
        while True:
            response = input(f"{prompt} (y/n): ").strip().lower()
            if response in ['y', 'yes']:
                return True
            elif response in ['n', 'no']:
                return False
            else:
                print("Please enter 'y' or 'n'")
    except KeyboardInterrupt:
        print("\n\nOperation cancelled by user.")
        sys.exit(0)


def main():
    # Set up signal handlers for graceful shutdown
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    parser = argparse.ArgumentParser(description='Git Tag Manager')
    parser.add_argument('-t', '--tag', help='Tag name/version')
    parser.add_argument('-d', '--description', help='Tag description/message')
    parser.add_argument('-p', '--push', action='store_true',
                       help='Push tags to remote without prompting')
    parser.add_argument('--increment', choices=['patch', 'minor', 'major'],
                       default='patch', help='Version increment type (default: patch)')

    args = parser.parse_args()

    # Check if we're in a git repository
    success, _ = run_git_command(['git', 'rev-parse', '--git-dir'])
    if not success:
        print("Error: Not in a git repository!")
        sys.exit(1)

    # Get current tag
    current_tag = get_latest_tag()
    if current_tag:
        print(f"Current latest tag: {current_tag}")
    else:
        print("No existing tags found.")

    # Determine next version
    if args.tag:
        tag_name = args.tag
        # Add 'v' prefix if not present
        if not tag_name.startswith('v'):
            tag_name = f"v{tag_name}"
    else:
        suggested_tag = get_next_version(current_tag)
        tag_name = get_user_input("Enter tag name", suggested_tag)

    # Validate tag format
    try:
        parse_version(tag_name)
    except ValueError as e:
        print(f"Error: {e}")
        sys.exit(1)

    # Check if tag already exists
    success, _ = run_git_command(['git', 'rev-parse', tag_name])
    if success:
        print(f"Error: Tag '{tag_name}' already exists!")
        sys.exit(1)

    # Get description
    if args.description:
        description = args.description
    else:
        description = get_user_input("Enter tag description")
        if not description:
            print("Error: Tag description is required!")
            sys.exit(1)

    # Create the tag
    print(f"\nCreating tag '{tag_name}' with description: '{description}'")
    if not create_tag(tag_name, description):
        sys.exit(1)

    print(f"Tag '{tag_name}' created successfully!")

    # Show tag information
    show_tag_info(tag_name)

    # Handle pushing
    should_push = args.push
    if not should_push:
        should_push = get_yes_no("\nPush tags to remote?")

    if should_push:
        if push_tags():
            print(f"\nTag '{tag_name}' has been created and pushed to remote!")
        else:
            print(f"\nTag '{tag_name}' created locally but failed to push to remote.")
            if get_yes_no("Delete the local tag?"):
                delete_tag(tag_name)
    else:
        if get_yes_no("Delete the local tag?"):
            delete_tag(tag_name)
        else:
            print(f"\nTag '{tag_name}' created locally. You can push it later with:")
            print(f"git push origin {tag_name}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nOperation cancelled by user.")
        sys.exit(0)
